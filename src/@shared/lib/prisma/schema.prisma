generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ClientAccountStatsBean {
  accountId       Int
  deviceNo        Int
  deviceTotalNo   Int
  offlineDeviceNo Int
  onlineDeviceNo  Int
  success         Boolean
  unUsedDeviceNo  Int
}

type ClientResultBean {
  code Int
}

type DeviceDeviceTypeBean {
  deviceTypeId Int
  parameter    Int
  success      Boolean
  typeName     String
  wireless     Boolean
}

type DeviceImportOwner {
  accountId               Int
  accountName             String
  accountStatsBean        DeviceImportOwnerAccountStatsBean?
  accountType             Int
  address                 String
  contactTel              String
  contactUser             String
  createTime              Float
  email                   String?
  isReceiveOfflineMessage Int
  isReceiveWaring         Int
  parentId                Int
  payUrl                  String?
  roles                   Int
  rootId                  Int
  success                 Boolean
  type                    Int
  userName                String
}

type DeviceImportOwnerAccountStatsBean {
  deviceNo        Int
  deviceTotalNo   Int
  offlineDeviceNo Int
  onlineDeviceNo  Int
  success         Boolean
  unUsedDeviceNo  Int
}

type DeviceOwnerBean {
  accountId               Int
  accountName             String
  accountStatsBean        DeviceOwnerBeanAccountStatsBean?
  accountType             Int
  address                 String
  contactTel              String
  contactUser             String
  createTime              Float
  email                   String?
  isReceiveOfflineMessage Int
  isReceiveWaring         Int
  parentId                Int
  payUrl                  String?
  roles                   Int
  rootId                  Int
  success                 Boolean
  type                    Int
  userName                String
}

type DeviceOwnerBeanAccountStatsBean {
  deviceNo        Int
  deviceTotalNo   Int
  offlineDeviceNo Int
  onlineDeviceNo  Int
  success         Boolean
  unUsedDeviceNo  Int
}

type CommentUser {
  id   String
  name String
}

model Comment {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  uuid           String
  message        String
  user_uuid      String
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  user           User       @relation(fields: [user_uuid], references: [id])
  migration      Migration? @relation(fields: [migration_uuid], references: [uuid])
  migration_uuid String?

  @@map("comment")
}

enum MigrationStatus {
  TO_DO             @map("TO-DO")
  INACTIVE
  PENDING
  WAITING
  DONE
  FAILED_BY_CLIENT  @map("FAIELD-BY-CLIENT")
  FAILED_BY_CONTACT @map("FAIELD-BY-CONTACT")
  SUCCESS
}

model WanwayClient {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  accountId               Int                    @unique
  accountName             String
  accountStatsBean        ClientAccountStatsBean
  accountType             Int
  address                 String
  contactTel              String
  contactUser             String
  createTime              Float
  email                   String?
  isLeaf                  Int
  isReceiveOfflineMessage Int
  isReceiveWaring         Int
  parentId                Int
  payUrl                  String?
  resultBean              ClientResultBean
  roles                   Int
  rootId                  Int
  success                 Boolean
  type                    Int
  userName                String
  migration               Migration?
  Meeting                 Meeting[]

  @@map("client")
}

model device {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  activateTime    Float?
  carOwner        String?
  contactTel      String?
  contactUser     String?
  deviceMobile    String?
  deviceTypeBean  DeviceDeviceTypeBean
  endTime         Float?
  iconId          Int?
  imei            String
  importOwner     DeviceImportOwner?
  importOwnerId   Int?
  importTime      Float
  isNeedPay       Int?
  isWireless      Int
  licenseNumber   String?
  name            String
  note            String?
  ownerBean       DeviceOwnerBean
  ownerId         Int
  platformEndtime Float?
  postCode        String?
  saleTime        Float?
  success         Boolean
  useStatus       Int
  vehicleId       Int?
  vin             String?
}

model extractionAudit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  extracted_at DateTime @db.Date
  filename     String
  path         String
}

model User {
  id            String      @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  firstAccess   Boolean?
  sessions      Session[]
  accounts      Account[]
  comments      Comment[]
  migrations    Migration[]
  Meeting       Meeting[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id @map("_id")
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

type ClientEntity {
  uuid     String?
  name     String?
  email    String?
  username String?
}

model BFleetClientEntity {
  id            String       @id @map("_id")
  bwfleet       ClientEntity
  assigned_uuid String?
  assigned_name String?
  Meeting       Meeting[]
}

model BFleetClient {
  id                     String       @id @default(auto()) @map("_id") @db.ObjectId
  uuid                   String       @unique
  subdomain              String?
  name                   String?
  document               Document?
  contacts               Contact[]
  address                Address?
  profile_uuid           String[]
  logo                   String?
  login_background       String?
  theme                  ClientTheme?
  parent_enterprise_uuid String?
  child_count            Int?
  depth                  Int?
  free_period            Validate?
  validate               Validate?
  tenant                 String[]
  enterprise_uuid        String?
  restriction_uuid       String?
  created_at             DateTime
  updated_at             DateTime?
  wwtAccountId           Int          @unique

  user      BFleetUser? @relation(fields: [user_uuid], references: [uuid])
  user_uuid String?
  migration Migration?

  @@index([id, uuid])
  @@map("bfleet_client")
}

type Document {
  type  String? // could be enum, but MongoDB composite types need String
  value String?
}

type Contact {
  name    String
  email   String
  contact String
  role    String?
}

type Address {
  country  String?
  state    String?
  number   String?
  street   String?
  district String?
  city     String?
  cep      String?
}

type ClientTheme {
  primary   ClientThemeColorVariable?
  secondary ClientThemeColorVariable?
  nav       ClientThemeColorVariable?
}

type ClientThemeColorVariable {
  default    String?
  foreground String?
}

type Validate {
  date DateTime
  days Int
}

type MagicLink {
  pin String
}

model BFleetUser {
  id                       String             @id @default(auto()) @map("_id") @db.ObjectId
  uuid                     String             @unique
  username                 String?
  blocked                  Boolean?
  name                     String
  password_creation_method String?
  password                 String?
  magic_link               MagicLink?
  email                    String?
  client                   ClientUserRelation
  contact                  String?
  BFleetClient             BFleetClient[]

  @@index([id, uuid])
  @@map("bfleet_user")
}

type ClientUserRelation {
  uuid String
  name String
}

type MigrationAccessToken {
  token       String?
  created_at  DateTime @default(now())
  completed   Boolean? @default(false)
  bfleet_uuid String
}

model Migration {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  assigned      User?   @relation(fields: [assigned_uuid], references: [id])
  assigned_uuid String?

  wwt_client     WanwayClient @relation(fields: [wwt_account_id], references: [accountId])
  wwt_account_id Int          @unique

  bfleet_client      BFleetClient? @relation(fields: [bfleet_client_uuid], references: [uuid])
  bfleet_client_uuid String?       @unique

  comments         Comment[]
  migration_status MigrationStatus?      @default(PENDING)
  migration_token  MigrationAccessToken?

  @@map("migration_audit")
}

model ScheduleSlot {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  start     DateTime
  end       DateTime
  status    SlotStatus @default(AVAILABLE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Meeting   Meeting?
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  CANCELED
}

model Meeting {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  accountId   String?     @db.ObjectId
  organizerId String
  description String?
  email       String?
  status      SlotStatus?
  slotId      String?     @unique @db.ObjectId
  clienteId   String?

  // Relacionamento com ScheduleSlot
  slot      ScheduleSlot?       @relation(fields: [slotId], references: [id])
  account   WanwayClient?       @relation(fields: [accountId], references: [id])
  organizer User                @relation(fields: [organizerId], references: [id])
  client    BFleetClientEntity? @relation(fields: [clienteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
